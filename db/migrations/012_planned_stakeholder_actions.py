"""Add planned_stakeholder_actions table for async stakeholder action generation.

This table holds precomputed stakeholder actions and reactions generated by
background workers. The hot path (event handlers) queries this table for ready
actions instead of blocking on LLM calls.
"""

from __future__ import annotations

import logging

logger = logging.getLogger(__name__)

description = "Add planned_stakeholder_actions table for async stakeholder action generation"


CREATE_TABLE_SQL = """
CREATE TABLE IF NOT EXISTS planned_stakeholder_actions (
    id BIGSERIAL PRIMARY KEY,
    stakeholder_id INTEGER NOT NULL,
    scene_id INTEGER,
    scene_hash TEXT,
    conflict_id INTEGER,
    kind TEXT NOT NULL CHECK (kind IN ('action', 'reaction', 'decision')),
    payload JSONB NOT NULL,
    status TEXT NOT NULL DEFAULT 'ready' CHECK (status IN ('ready', 'consumed', 'expired', 'failed')),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    available_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    consumed_at TIMESTAMPTZ,
    priority INTEGER NOT NULL DEFAULT 5,
    context_hash TEXT,
    CONSTRAINT fk_stakeholder FOREIGN KEY (stakeholder_id) REFERENCES NPCs(id) ON DELETE CASCADE
);

-- Indexes for fast hot-path queries
CREATE INDEX IF NOT EXISTS idx_planned_actions_stakeholder_status
    ON planned_stakeholder_actions(stakeholder_id, status, available_at DESC);

CREATE INDEX IF NOT EXISTS idx_planned_actions_scene_ready
    ON planned_stakeholder_actions(scene_hash, status)
    WHERE status = 'ready';

CREATE INDEX IF NOT EXISTS idx_planned_actions_conflict_ready
    ON planned_stakeholder_actions(conflict_id, status, priority DESC)
    WHERE status = 'ready';

CREATE INDEX IF NOT EXISTS idx_planned_actions_context_hash
    ON planned_stakeholder_actions(context_hash)
    WHERE status = 'ready';

-- Partial index for cleanup queries
CREATE INDEX IF NOT EXISTS idx_planned_actions_expired
    ON planned_stakeholder_actions(created_at)
    WHERE status IN ('consumed', 'expired');

-- Add comment for documentation
COMMENT ON TABLE planned_stakeholder_actions IS
    'Precomputed stakeholder actions generated by background workers for hot-path consumption';
"""


DROP_TABLE_SQL = """
DROP TABLE IF EXISTS planned_stakeholder_actions CASCADE;
"""


async def upgrade(conn):
    """Create the planned_stakeholder_actions table and indexes."""
    await conn.execute(CREATE_TABLE_SQL)
    logger.info("Created planned_stakeholder_actions table with indexes")


async def downgrade(conn):
    """Drop the planned_stakeholder_actions table."""
    await conn.execute(DROP_TABLE_SQL)
    logger.info("Dropped planned_stakeholder_actions table")
