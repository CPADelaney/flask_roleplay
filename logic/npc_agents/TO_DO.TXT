====================================================
MEMORY LIFECYCLE & PERFORMANCE NOTES
====================================================

1) DATA LIFECYCLE / MEMORY STORAGE
----------------------------------
If your system stores large amounts of NPC memory logs (e.g., JSON arrays in the DB), this can escalate quickly in an active environment:
 - **Archiving / Trimming**:
   * Consider periodically migrating older or lower-priority memories to an archive table (or S3, or offline storage).
   * Alternatively, set a max memory count (e.g., each NPC can only keep 50 “recent” events), discarding or compressing older logs.
 - **Active vs. Passive Memories**:
   * In real life, we don't recall every minor event; memories fade or get “triggered” only by context.
   * Implement a system that only retains “core” or “high-significance” memories in the primary array. 
   * Lower-significance or older “passive” memories either:
     1) Migrate to a secondary storage or 
     2) Get pruned unless a new event triggers a recall.
   * Example: If an NPC had 200 minor social interactions, keep only the last 5–10 with moderate or high significance. 
 - **Memory Decay**:
   * Let memories gradually fade in detail or degrade. 
   * For example, each memory could have a “decay timer”; once it expires, either reduce it to a short summary or remove it entirely.
   * This approach keeps DB sizes smaller and simulates real forgetfulness.

2) PERFORMANCE PROFILING & SCALABILITY
--------------------------------------
When dozens (or hundreds) of NPCs each update memory, relationships, or schedules:
 - **Measure Query Times**:
   * Instrument your code so you can see how long each major DB call takes. 
   * Keep an eye out for hotspots (like repeated large JSON loads/saves).
 - **Batch or Bulk Operations**:
   * If each NPC is doing multiple small updates, consider a batched approach. 
   * Write a single update for many NPCs, rather than one transaction per agent each time.
 - **Async DB Drivers or Offloading**:
   * If you’re blocking on DB I/O in a high-traffic environment, switch to an async driver or offload blocking calls to a worker thread pool.
 - **Indexing & Table Design**:
   * Ensure the columns you frequently filter by (npc_id, conversation_id, etc.) are properly indexed.
   * For memory or schedule data, consider splitting out large unstructured JSON from the main table if it’s rarely queried in full.

3) MAKING NPC MEMORY MORE “HUMAN”
---------------------------------
Real people don't recall every detail from the past—some events are “stickier” because of emotion, repetition, or significance:
 - **Emotional Tagging**:
   * If a memory has a strong positive or negative emotional_valence, keep it longer or put it in a “core memories” list.
   * Mild or neutral memories fade out quickly.
 - **Context Triggering**:
   * NPC only recalls or references a memory if something in the present environment/interaction triggers it (location, key phrases, etc.).
   * This saves overhead from constantly rummaging through old memories and avoids unrealistic total recall.
 - **Consolidating Over Time**:
   * If many repetitive events occur (e.g., “the player greeted me politely every morning for a week”), merge them into a single “summary memory” after some time: “The player consistently greeted me politely last week.”
   * This reduces memory clutter and simulates how humans compress repeated experiences.

4) EXAMPLES OF MEMORY HANDLING
------------------------------
 - **Short-Term (ephemeral)**:
   * Store only for a few in-game days, or until overshadowed by new events.
   * Quick ephemeral notes, e.g., “We chatted about the weather today.”
 - **Medium-Term (semi-significant)**:
   * Lasts longer, typically includes moderate emotional impact or meaningful interactions.
   * Subject to fade if unreferenced.
 - **Core / Significant**:
   * Strong emotional or plot impact—rarely discarded unless truly overshadowed by major events. 
   * Examples: A traumatic betrayal, pivotal story event, or an extremely positive bonding moment.

By **combining** these strategies—fading, archiving, context-based recall, and overall memory-lifetime management—you’ll keep database usage under control **and** create more realistic, human-like NPC memory behavior.


====================================================
RELATIONSHIP IDEAS & FUTURE EXPANSION
====================================================

1) RELATIONSHIP TUNING & COMPLEXITY
-----------------------------------
Currently, your system adjusts relationship link levels with 
simple thresholds (e.g., +1, -2). For deeper immersion, consider:

 - Personality Modifiers:
   * Each NPC might have traits like "dominant", "timid", or "cruel".
   * Store these traits in your database or config so they can 
     amplify or reduce any changes.
     Example: A "cruel" NPC might interpret innocent actions more harshly,
              leading to greater negative changes.
   * Weighted changes: 
     final_change = base_change * personality_coefficient

 - More Detailed Relationship States:
   * Instead of just "neutral", "ally", or "rival", add states like 
     "fearful respect", "untrusting alliance", "forced obedience", etc.
     The link_type can shift based on synergy between traits & actions.

 - Player & NPC Stats Integration:
   * If your system tracks stats like "Obedience" or "Confidence", use
     them to further modulate relationship changes.

 - Gradual Decay or Growth:
   * Over time, relationships might decay (e.g., losing +1 per day) 
     if there is no interaction—fostering the need for regular upkeep
     or re-engagement.

2) ADAPTIVE DECISION LOGIC
--------------------------
Your NPCDecisionEngine might currently pick from a list of available 
actions with minimal logic. To expand:

 - Behavior Heuristics:
   * Combine current mood, relationship levels, personality, 
     and external factors (time of day, location danger) to 
     produce a "score" for each potential action.

 - Long-Term Goals:
   * Define personal objectives for each NPC (e.g., "seek more power", 
     "protect the player", "gain favor with faction X").
   * Each decision can push them slightly closer to or farther from 
     their goal. This yields more believable continuity.

 - Faction or Group Influences:
   * If the NPC is part of a faction, let that faction’s stance 
     toward the player or other NPCs color the NPC’s decisions 
     (cooperate vs. sabotage, etc.).

 - Emotional State Tracking:
   * Keep a short-term mood or emotional state that’s impacted 
     by recent interactions. Example: If the player repeatedly 
     insults the NPC, mood worsens, leading to more hostile 
     action choices.

Overall, these expansions make your NPCs feel more nuanced, 
reactive, and “alive.” Even small changes—like referencing 
an NPC’s “cruelty” trait to magnify negative relationship 
responses—can yield a big difference in gameplay dynamics.
